---
layout: post
title: TwoSum
---

#### [题目1]

给定 nums = [2, 7, 11, 15], target = 9

因为 nums[0] + nums[1] = 2 + 7 = 9所以返回 [0, 1]

这里使用HashMap建立数字和其坐标位置之间的映射，利用HashMap的常数级查找效率，降低时间复杂度。

**HashMap的简单使用**

    创建
        HashMap<Integer, Integer> m = new HashMap<Integer, Integer>();
    存储
        m.put(key, value);
    读取
        m.get(key);
        //返回key对应的 value;
    表中是否存在键
        m.containsKey(key);
    
**核心代码**    
```
for (int i = 0; i < nums.length; ++i) {
    int t = target - nums[i];
    if (m.containsKey(t) && m.get(t) != i) {
        res[0] = i;
        res[1] = m.get(t);
    }
}
```

#### [题目167]
nums是一个已按照升序排列的有序数组

输入: numbers = [2, 7, 11, 15], target = 9 输出: [1,2]

因为是有序数组，可以采用二分法
```
public static int[] twoSum(int[] numbers, int target) {
    int left = 0;
    int right = numbers.length - 1;
     
    while(left < right) {
      int sum = numbers[left] + numbers[right];
      if(sum == target) {
      	 return new int[] {left + 1, right + 1};
      }else if(sum < target){
      	left++;     		
      }else {
        right--;
      }
     }
   return new int[] {};
}
```
#### [题目2]

输入：(2 -> 4 -> 3) + (5 -> 6 -> 4)
输出：7 -> 0 -> 8
原因：342 + 465 = 807

```
ListNode(int[] nums) {
        ListNode target = new ListNode(nums[0]);
        ListNode head = target;
        for (int i = 1; i < nums.length; i++) {
            target.next = new ListNode(nums[i]);
            target = target.next;
        }
        this.val = head.val;
        this.next = head.next;
    }
```












参考资料：

 [LeetCode All in One 题目讲解汇总(持续更新中...)](https://www.cnblogs.com/grandyang/p/4606334.html1)

[LeetCode 题库](https://leetcode-cn.com/problemset/all/)

