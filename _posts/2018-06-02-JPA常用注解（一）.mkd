---
layout: post
title:  JPA常用注解（一）
---
### @Column 注释
@Column注解来标识实体类中属性与数据表中字段的对应关系。  
@Column注解一共有10个属性，均为可选属性。  
1. **name**  
定义了被标注字段在数据库表中所对应字段的名称；  
2. **unique**  
该字段是否为唯一标识，默认为false。如果表中有一个字段需要唯一标识，则既可以使用该标记，也可以使用@Table标记中的@UniqueConstraint。  
3. **nullable**  
nullable属性表示该字段是否可以为null值，默认为true。  
4. **insertable**  
insertable属性表示在使用“INSERT”脚本插入数据时，是否需要插入该字段的值。  
5. **updatable**  
updatable属性表示在使用“UPDATE”脚本插入数据时，是否需要更新该字段的值。insertable和updatable属性一般多用于只读的属性，例如主键和外键等。这些字段的值通常是自动生成的。  
6. **columnDefinition**  
columnDefinition属性表示创建表时，该字段创建的SQL语句，一般用于通过Entity生成表定义时使用。（也就是说，如果DB中表已经建好，该属性没有必要使用。）  
7. **table**  
table属性定义了包含当前字段的表名。  
8. **length**  
length属性表示字段的长度，当字段的类型为varchar时，该属性才有效，默认为255个字符。  
9. **precision 和 scale**  
precision属性和scale属性表示精度，当字段类型为double时，precision表示数值的总长度，scale表示小数点所占的位数。  
ps:此标记可以标注在**getter方法或属性前**  
API文档地址： http://docs.oracle.com/javaee/5/api/javax/persistence/Column.html

### @Table 注释
当实体类与其映射的数据库表名不同名时需要使用 @Table 标注说明，该标注与 @Entity 标注并列使用，置于实体类声明语句之前，可写于单独语句行，也可与声明语句同行。  
@Table注解一共有4个属性  
1. **name**  
    指明数据库的表名,若不指定则以实体类名称作为表名。  
2. **catalog 和 schema**  
    用于设置表所属的数据库目录或模式，通常为数据库名。  
    当catalog属性不指定时，新创建的表将出现在url指定的数据库实例中  
    当catalog属性设置名称时，若数据库存在和指定名称一致的实例，新创建的表将出现在该实例中  
3. **uniqueConstraints**  
    用于设置约束条件，通常不须设置。
    ```
    @Table(name="CUSTOMERS",uniqueConstraints={@UniqueConstraint(columnNames={"name"})})
    @Entity
    public class Customer {
    private Integer id;
    private String name;
    private String email;
    private int age;
    ......
    }
    
    ```
    uniqueConstraints={@UniqueConstraint(columnNames={“name”})} 表示name列的值不能重复

### @GeneratedValue 注释
1. **@Id**  
    @Id 标注用于声明一个实体类的属性映射为数据库的主键列。  
2. **@GeneratedValue**  
    @GeneratedValue 用于标注主键的生成策略，通过strategy 属性指定。  
    默认情况下，JPA 自动选择一个最适合底层数据库的主键生成策略：SqlServer对应identity，MySQL 对应 auto increment。  
    在javax.persistence.GenerationType中定义了以下几种可供选择的策略：  
    –IDENTITY：主键由数据库自动生成（主要是自动增长型） ，Oracle 不支持；  
    –AUTO： 默认；  
    –SEQUENCE：通过序列产生主键，通过@SequenceGenerator 注解指定序列名，MySql不支持这种方式  
    –TABLE：通过表产生主键，框架借由表模拟序列产生主键，使用该策略可以使应用更易于数据库移植。    
    ```
    @Entity
    @Table(name = "book")
    public class Book {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)//id自增长
    @Column(name = "id")
    private String id;
    @Column(name = "name")
    private String name;
    @Column(name = "author")
    private String author;
    ...
    ```



























